"""
file:       mitm.py
author:     Chris Tremblay <cst1465@rit.edu>
language:   Python3
date:       03/06/2023, Happy National Dentist's Day!
description:
    sniffs for modbus traffic
"""

from scapy.all import *
import logging
import struct

PCAP_FILE_PATH = ""
OPEN_PLC_IP = "192.168.1.35"

LOGGING_LEVEL = logging.DEBUG

# MODBUS function code
FC_READ_COIL    = 1
FC_DISCREET_IN  = 2
FC_SINGLE_COIL  = 5

# MODBUS output values
OUT_ON = 0x0000
OUT_OFF = 0xFF00

def packet_handler( packet ):
    """
    """
    print( packet.summary() )

def main():
    """
    description:
        The driver function
    """
    # init logging
    logging.basicConfig( level=LOGGING_LEVEL )

    # sniff time
    filt = "host %s and port 502" % OPEN_PLC_IP # filter by plc host and mbtcp port
    pkts = sniff( offline="modbus.pcap", handler=packet_handler, filter=filt )
    for pkt in pkts:
        print( "summary:", pkt.summary() )
        try:
            trans_id, proto_id, length, unit_id,func_code, = \
                struct.unpack( "!HHHBB", pkt[Raw].load[:8] )

            if( func_code == FC_SINGLE_COIL ):
                pkt.show()
                out_addr, out_val = struct.unpack( "!HH", pkt[Raw].load[8:13] )
                print( "trans_id", trans_id )
                print( "proto_id:", proto_id )
                print( "length:", length )
                print( "unit_id:", unit_id )
                print( "func_code:", func_code )    
                print( "out_addr:", out_addr )
                print( "out_val:", hex( out_val ) )
        except Exception as e:
            pass
    return

if( __name__ == "__main__" ):
    main()
